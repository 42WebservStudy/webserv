@startuml





/' Objects '/

class HelloWorldHandler {
	+handleRequest(const HttpRequest& request, HttpResponse& response) : void
}


abstract class HttpHandler {
	+{abstract} handleRequest(const HttpRequest& request, HttpResponse& response) : void
}


class HttpRequest {
	+headers : std::map<std::string, std::string>
	+body : std::string
	+method : std::string
	+path : std::string
}


class HttpResponse {
	+status : int
	+headers : std::map<std::string, std::string>
	+body : std::string
}


class HttpServer {
	+HttpServer(int port)
	-parseRequest(int clientSocket) : HttpRequest
	-port : int
	-routes : std::map<std::string, HttpHandler*>
	+addRoute(const std::string& path, HttpHandler* handler) : void
	-handleClient(int clientSocket) : void
	-handleNewConnection(int serverSocket, int kqueueFd) : void
	-sendResponse(int clientSocket, const HttpResponse& response) : void
	+start() : void
}


class NotFoundHandler {
	+handleRequest(const HttpRequest& request, HttpResponse& response) : void
}





/' Inheritance relationships '/

.HttpHandler <|-- .HelloWorldHandler


.HttpHandler <|-- .NotFoundHandler





/' Aggregation relationships '/

.HttpServer o-- .HttpHandler






/' Nested objects '/



@enduml
