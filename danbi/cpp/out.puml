@startuml





/' Objects '/

class HelloWorldHandler {
	+handleRequest(const HttpRequest& request, HttpResponse& response) : void
}


abstract class HttpHandler {
	+{abstract} handleRequest(const HttpRequest& request, HttpResponse& response) : void
}


class HttpRequest {
	+headers : std::map<std::string, std::string>
	+body : std::string
	+method : std::string
	+path : std::string
}


class HttpResponse {
	+status : int
	+headers : std::map<std::string, std::string>
	+body : std::string
}


class Kqueue {
	+Kqueue()
	+~Kqueue()
	-_isClosed : bool
	-getIsClosed() : bool& {query}
	-_eventCount : int
	-_kqFd : int
	-eventRun() : int
	-getKqFd() : int& {query}
	-_changeList : std::vector<struct kevent>
	-_eventList : struct kevent
	-getEvent() : struct kevent& {query}
	-setEvent(int socket, uintptr_t ident, int16_t filter, uint16_t flags, uint32_t fflags, intptr_t data, void* udata) : void
}


class NotFoundHandler {
	+handleRequest(const HttpRequest& request, HttpResponse& response) : void
}





/' Inheritance relationships '/

.HttpHandler <|-- .HelloWorldHandler


.HttpHandler <|-- .NotFoundHandler





/' Aggregation relationships '/





/' Nested objects '/



@enduml
